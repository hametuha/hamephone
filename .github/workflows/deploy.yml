name: 🚀 Deploy to Cloud Run

on:
  push:
    branches: [ main, master ]

env:
  REGION: asia-northeast1
  SERVICE_NAME: hamephone

jobs:
  test-and-deploy:
    name: Test and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable secretmanager.googleapis.com
        gcloud services enable storage.googleapis.com
        gcloud services enable cloudresourcemanager.googleapis.com
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Check Cloud Build permissions
      run: |
        echo "🔍 Cloud Build権限を確認中..."
        gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --flatten="bindings[].members" --filter="bindings.members:github-actions@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com" --format="table(bindings.role)" || echo "権限確認でエラーが発生しましたが、続行します"
        
        echo "🔍 Cloud Buildサービスアカウント権限を確認中..."
        gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --flatten="bindings[].members" --filter="bindings.members:749371950666@cloudbuild.gserviceaccount.com" --format="table(bindings.role)" || echo "権限確認でエラーが発生しましたが、続行します"
    
    - name: Build and push Docker image
      run: |
        echo "🔧 Cloud BuildでDockerイメージをビルド中..."
        BUILD_ID=$(gcloud builds submit \
          --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }} \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --verbosity=debug \
          --timeout=1800 \
          --machine-type=E2_HIGHCPU_8 \
          --format="value(id)" \
          --async)
        
        echo "📋 ビルドID: $BUILD_ID"
        echo "⏳ ビルドの完了を待機中..."
        
        # ビルドの完了を待機（最大30分）
        for i in {1..180}; do
          BUILD_STATUS=$(gcloud builds describe $BUILD_ID --project ${{ secrets.GCP_PROJECT_ID }} --format="value(status)" 2>/dev/null || echo "UNKNOWN")
          echo "📊 ビルド状態 ($i/180): $BUILD_STATUS"
          
          if [ "$BUILD_STATUS" = "SUCCESS" ]; then
            echo "✅ ビルドが成功しました"
            break
          elif [ "$BUILD_STATUS" = "FAILURE" ] || [ "$BUILD_STATUS" = "TIMEOUT" ] || [ "$BUILD_STATUS" = "CANCELLED" ]; then
            echo "❌ ビルドが失敗しました: $BUILD_STATUS"
            exit 1
          fi
          
          sleep 10
        done
        
        # 最終確認
        FINAL_STATUS=$(gcloud builds describe $BUILD_ID --project ${{ secrets.GCP_PROJECT_ID }} --format="value(status)" 2>/dev/null || echo "UNKNOWN")
        if [ "$FINAL_STATUS" != "SUCCESS" ]; then
          echo "❌ ビルドがタイムアウトまたは失敗しました: $FINAL_STATUS"
          exit 1
        fi
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --set-env-vars PORT=3000 \
          --set-secrets TWILIO_ACCOUNT_SID=twilio-account-sid:latest \
          --set-secrets TWILIO_AUTH_TOKEN=twilio-auth-token:latest \
          --set-secrets TWILIO_PHONE_NUMBER=twilio-phone-number:latest \
          --set-secrets TWILIO_SMS_NUMBER=twilio-sms-number:latest \
          --set-secrets FORWARD_TO=forward-to:latest \
          --set-secrets AWS_ACCESS_KEY_ID=aws-access-key-id:latest \
          --set-secrets AWS_SECRET_ACCESS_KEY=aws-secret-access-key:latest
    
    - name: Show service URL
      run: |
        echo "✅ デプロイが完了しました！"
        echo "🌐 サービスURL:"
        gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format="value(status.url)" 